name: 'Deploy'

on: 
  workflow_dispatch:


env:
  TF_LOG: INFO

  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    # The order of checkouts is important because of cleaning and the step afterwards will not find anything
    # unless there is a specific path specified!

    # Checkout client files to root folder
    - name: Checkout Client
      uses: actions/checkout@v3


    # Checkout the module repository to separate folder protecting root file system    
    - name: Checkout Modules
      uses: actions/checkout@v3
      with:
        repository: WolfgangBaeck/REB3Modules
        path: modules

    - name: Show FileSystem
      run: ls -R

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7

    # Initialize a new or existing Terraform working directory by creating initial files, 
    # loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init 

    # Run a terraform plan for pull requests only
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
    
    # Add a comment to pull requests with plan results
    - name: truncate terraform plan result
      run: |
        plan=$(cat <<'EOF'
        ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        EOF
        )
        echo "${plan}" | grep -v 'Refreshing state' >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: create comment from plan result
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${ process.env.PLAN }
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.TF_WORK_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })```

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve